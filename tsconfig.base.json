{
	"compilerOptions": {
		"lib": ["ESNext", "dom"], // specifies which default set of type definitions to use ("DOM", "ES6", etc)    "outDir": "lib", // .js (as well as .d.ts, .js.map, etc.) files will be emitted into this directory.,

		"removeComments": true, // Strips all comments from TypeScript files when converting into JavaScript- you rarely read compiled code so this saves space
		"target": "ES6", // Target environment. Most modern browsers support ES6, but you may want to set it to newer or older. (defaults to ES3)
		"checkJs": true, // Report errors in .js files.

		// Module resolution
		"esModuleInterop": true, // fixes some issues TS originally had with the ES6 spec where TypeScript treats CommonJS/AMD/UMD modules similar to ES6 module
		"moduleResolution": "node", // Pretty much always node for modern JS. Other option is "classic"
		// "typeRoots": [], // List of folders to include type definitions from.
		// "types": [], // Type declaration files to be included in compilation.

		// Source Map
		"sourceMap": true, // enables the use of source maps for debuggers and error reporting etc
		"sourceRoot": "/", // Specify the location where a debugger should locate TypeScript files instead of relative source locations.

		/* Ensure that casing is correct in imports. */
		"forceConsistentCasingInFileNames": true,

		// Strict Checks
		/* Ensure that casing is correct in imports. */
		/* Type Checking */
		"strict": true
		/* Enable all strict type-checking options.  */
		// Linter Checks
		// "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
		// "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
		// "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
		// "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
		// "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
		// "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
		// "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
		// "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
		// "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
		// "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
		// "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
		// "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
		// "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
		// "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
		// "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
		// "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
		// "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
		// "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
	},
	"exclude": ["node_modules/**/*"]
}
